% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/src_Permut_GRanges.R
\name{Permut_GRanges}
\alias{Permut_GRanges}
\title{A function to generate permutation-based p-values based on overlap between GRanges objects}
\usage{
Permut_GRanges(
  featureset,
  foreground,
  background,
  nperm = 500,
  return.bg_overlaps = FALSE,
  conf.level = 0.95,
  cores = detectCores()
)
}
\arguments{
\item{featureset}{GRanges object to overlap with the below objects, see details.}

\item{foreground}{GRanges object containing regions that will be used to generate 
the observed overlaps with the featureset set}

\item{background}{GRanges object containing regions that will be used to generate 
the permutated/random overlaps with the featureset set}

\item{nperm}{number of permutations. Smallest p-value is calculated by 1/(nperm+1)}

\item{return.bg_overlaps}{logical, whether to return the number of overlaps between permuted backgrounds and featureset
as part of the output list. Can be useful for plotting/visualization.}

\item{conf.level}{the confidence level to calculate}

\item{cores}{number of mclapply workers for the permutations}
}
\description{
Output is a named list with p-values, observed overlap and confidence intervals.
}
\details{
Test whether a set of genomic regions, here called foreground, is statistically associated with a set
of genomic features, here called featureset, e.g. foreground being a set of TSS, and featureset being ChIP-seq
TF peaks. The question could e.g. be whether these TSS and its vicinity (say 50kb) show more overlap with the TF peaks
than a background which could be all annotated TSS or all expressed TSS in this experiment. For this we would provide 
as foreground the TSS coordinates, resizes by 25kb in each direction. Based on these we count the observed overlap between 
featureset and foreground as the number of unique overlapping elements of featureset with foreground.
We compare this with the expected overlap based on the background. The background could e.g. be all annotated TSS 
(or all expressed TSS) extended by the same window size as foreground. Foreground can (and probably should) be part of background.
For the expected overlap based on background we randomly draw (without replacement) from the background the same number of entries as 
there are in foreground and then do the same overlap counting as above. We repeat this nperm times to define the expected
overlap and calculate confidence intervals. p-values are then calculated based on the formula:  
\code{(1+sum(s.random >= s.is))/(nperm+1)} where \code{s.random} are the overlaps between background and featureset,
\code{s.is} is the observed overlap between foreground and featureset and nperm is the number of permutations.
The returned `pval_greater` is then the probability for the Null of foreground not being enriched for overlaps.
The `pval_less` is the probability for the Null that the foreground is not depleted for overlaps. The formula above
is then `<=` rather than `>=`. The returned confidence intervals indicate the bounds of the expected overlaps based on the
background set. Output is returned as a named list.
}
\examples{
# A simple example, using airway to get some coordinates:
library(airway)
data(airway)
# simply use the first 500 genes to define a background set
background=reduce(unlist(rowRanges(airway)[c(1:500)]))
# as a primitive example we define the first 50 as the foreground
foreground=background[1:50]
# and as features we also use the first 50 so obviously these will be significantly
# associated with foreground as they're the same, this is just for illustration obviously
featureset=foreground
# unsurprisingly this is significant and the smallest possible pvalue (1/(nperm+1))
Permut_GRanges(featureset=featureset,foreground=foreground,background=background,nperm=100,return.bg_overlaps=TRUE)

}
\author{
Alexander Toenges
}
